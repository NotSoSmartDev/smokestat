{"version":3,"mappings":"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","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","event","r","e","updateSW","notification","DB_NAME","DB_VERSION","STORE_NAME","formatDate","date","getTodayDate","initDB","resolve","reject","request","db","store","addSmokeRecord","record","getTodayRecords","today","index","range","getTodayCount","error","timerInterval","timerElement","lastTimestamp","formatElapsedTime","ms","seconds","minutes","hours","days","initTimer","elementId","updateTimerDisplay","updateTimer","timestamp","elapsed","formatTimestamp","smokeButton","recordsList","todayCountElement","initUI","updateTodayCount","count","animateSmokeButton","clearRecordsList","addRecordToList","li","timeSpan","elapsedSpan","previousRecord","_b","_a","updateRecordsList","records","a","b","showNotification","message","type","setupInstallPrompt","deferredPrompt","installButton","outcome","initApp","ui.initUI","db.initDB","ui.showNotification","timer.initTimer","loadTodayData","setupEventListeners","db.getTodayRecords","ui.updateTodayCount","ui.updateRecordsList","latestRecord","timer.updateTimer","ui.animateSmokeButton","db.addSmokeRecord","db.getTodayCount","ui.addRecordToList","ui.setupInstallPrompt"],"sources":["../../../../../../../@vite-plugin-pwa/virtual:pwa-register","../../public/js/sw-register.js","../../public/js/db.js","../../public/js/timer.js","../../public/js/ui.js","../../public/js/app.js"],"sourcesContent":["// src/client/build/register.ts\nvar autoUpdateMode = \"true\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"/smokestat/sw.js\", { scope: \"/smokestat/\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"/smokestat/sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\nexport {\n  registerSW\n};\n","// sw-register.js - Service worker registration for SmokeStats PWA\nimport { registerSW } from 'virtual:pwa-register';\n\n// Function to update the service worker on new version\nconst updateSW = registerSW({\n  // When a new service worker is available, you can choose what to do\n  onNeedRefresh() {\n    // Show a confirmation dialog to the user\n    if (confirm('New content available. Reload?')) {\n      updateSW();\n    }\n  },\n  onOfflineReady() {\n    console.log('App ready to work offline');\n    // Optionally show a notification to the user\n    const notification = document.createElement('div');\n    notification.className = 'notification info';\n    notification.textContent = 'App is ready for offline use';\n    document.body.appendChild(notification);\n    \n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      notification.classList.add('fade-out');\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 300);\n    }, 3000);\n  },\n});\n\n// Register the service worker when the page loads\nwindow.addEventListener('load', () => {\n  // The registration is already handled by the registerSW function above\n  console.log('Service worker registration initialized');\n});\n\nexport { updateSW };","// db.js - Database operations module for SmokeStats\nconst DB_NAME = 'smokeStatsDB';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'smokeRecords';\n\n// Utility function to format date as YYYY-MM-DD\nconst formatDate = (date) => {\n  const d = date || new Date();\n  return d.toISOString().split('T')[0];\n};\n\n// Utility function to get today's date in YYYY-MM-DD format\nconst getTodayDate = () => formatDate(new Date());\n\n// Initialize the database\nexport const initDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    \n    request.onerror = (event) => {\n      console.error('Database error:', event.target.error);\n      reject('Could not open database');\n    };\n    \n    request.onsuccess = (event) => {\n      const db = event.target.result;\n      console.log('Database opened successfully');\n      resolve(db);\n    };\n    \n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      \n      // Create object store with auto-incrementing key\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });\n        \n        // Create indexes for faster queries\n        store.createIndex('timestamp', 'timestamp', { unique: false });\n        store.createIndex('date', 'date', { unique: false });\n        \n        console.log('Object store created');\n      }\n    };\n  });\n};\n\n// Add a new smoking record\nexport const addSmokeRecord = async () => {\n  const db = await initDB();\n  \n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([STORE_NAME], 'readwrite');\n    const store = transaction.objectStore(STORE_NAME);\n    \n    const record = {\n      timestamp: Date.now(),\n      date: getTodayDate(),\n    };\n    \n    const request = store.add(record);\n    \n    request.onsuccess = () => {\n      console.log('Record added successfully');\n      resolve(record);\n    };\n    \n    request.onerror = (event) => {\n      console.error('Error adding record:', event.target.error);\n      reject('Failed to add record');\n    };\n  });\n};\n\n// Get all records for today\nexport const getTodayRecords = async () => {\n  const db = await initDB();\n  const today = getTodayDate();\n  \n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([STORE_NAME], 'readonly');\n    const store = transaction.objectStore(STORE_NAME);\n    const index = store.index('date');\n    const range = IDBKeyRange.only(today);\n    \n    const request = index.getAll(range);\n    \n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n    \n    request.onerror = (event) => {\n      console.error('Error getting today\\'s records:', event.target.error);\n      reject('Failed to get today\\'s records');\n    };\n  });\n};\n\n// Get the count of cigarettes smoked today\nexport const getTodayCount = async () => {\n  try {\n    const records = await getTodayRecords();\n    return records.length;\n  } catch (error) {\n    console.error('Error getting today\\'s count:', error);\n    return 0;\n  }\n};\n\n// Get the timestamp of the last smoking record\nexport const getLastSmokeTimestamp = async () => {\n  const db = await initDB();\n  \n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([STORE_NAME], 'readonly');\n    const store = transaction.objectStore(STORE_NAME);\n    const index = store.index('timestamp');\n    \n    // Open a cursor to the last (latest timestamp) record\n    const request = index.openCursor(null, 'prev');\n    \n    request.onsuccess = (event) => {\n      const cursor = event.target.result;\n      if (cursor) {\n        // Return the timestamp of the first record (which is the latest)\n        resolve(cursor.value.timestamp);\n      } else {\n        // No records found\n        resolve(null);\n      }\n    };\n    \n    request.onerror = (event) => {\n      console.error('Error getting last smoke timestamp:', event.target.error);\n      reject('Failed to get last smoke timestamp');\n    };\n  });\n};\n\n// Get all records (for potential future features like statistics)\nexport const getAllRecords = async () => {\n  const db = await initDB();\n  \n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([STORE_NAME], 'readonly');\n    const store = transaction.objectStore(STORE_NAME);\n    \n    const request = store.getAll();\n    \n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n    \n    request.onerror = (event) => {\n      console.error('Error getting all records:', event.target.error);\n      reject('Failed to get all records');\n    };\n  });\n};\n\n// Clear all data (for potential reset feature)\nexport const clearAllData = async () => {\n  const db = await initDB();\n  \n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([STORE_NAME], 'readwrite');\n    const store = transaction.objectStore(STORE_NAME);\n    \n    const request = store.clear();\n    \n    request.onsuccess = () => {\n      console.log('All records cleared successfully');\n      resolve();\n    };\n    \n    request.onerror = (event) => {\n      console.error('Error clearing records:', event.target.error);\n      reject('Failed to clear records');\n    };\n  });\n};","// timer.js - Timer module for tracking time since last cigarette\nlet timerInterval = null;\nlet timerElement = null;\nlet lastTimestamp = null;\n\n// Format milliseconds to a readable time string\nexport const formatElapsedTime = (ms) => {\n  if (!ms) return '--';\n  \n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  \n  if (days > 0) {\n    return `${days}d ${hours % 24}h ${minutes % 60}m`;\n  } else if (hours > 0) {\n    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  } else {\n    return `${seconds}s`;\n  }\n};\n\n// Initialize the timer\nexport const initTimer = (elementId) => {\n  timerElement = document.getElementById(elementId);\n  if (!timerElement) {\n    console.error(`Element with id ${elementId} not found`);\n    return;\n  }\n  \n  updateTimerDisplay();\n};\n\n// Update the timer with a new timestamp\nexport const updateTimer = (timestamp) => {\n  lastTimestamp = timestamp;\n  \n  // Clear any existing interval\n  if (timerInterval) {\n    clearInterval(timerInterval);\n  }\n  \n  // Update immediately\n  updateTimerDisplay();\n  \n  // Set up interval to update every second\n  timerInterval = setInterval(updateTimerDisplay, 1000);\n};\n\n// Update the timer display\nconst updateTimerDisplay = () => {\n  if (!timerElement) return;\n  \n  if (!lastTimestamp) {\n    timerElement.textContent = 'No records yet';\n    return;\n  }\n  \n  const now = Date.now();\n  const elapsed = now - lastTimestamp;\n  timerElement.textContent = formatElapsedTime(elapsed);\n};\n\n// Format a timestamp to a readable time string (for records list)\nexport const formatTimestamp = (timestamp) => {\n  const date = new Date(timestamp);\n  \n  // For today's records, we only need the time\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n  \n  return `${hours}:${minutes}`;\n};","// ui.js - UI module for managing the interface\nimport { formatTimestamp, formatElapsedTime } from './timer.js';\n\n// UI Elements\nlet smokeButton = null;\nlet recordsList = null;\nlet todayCountElement = null;\n\n// Initialize the UI\nexport const initUI = () => {\n  smokeButton = document.getElementById('smoke-button');\n  recordsList = document.getElementById('smoke-records');\n  todayCountElement = document.getElementById('today-count');\n  \n  if (!smokeButton || !recordsList || !todayCountElement) {\n    console.error('Required UI elements not found');\n    return false;\n  }\n  \n  return true;\n};\n\n// Update the today's count display\nexport const updateTodayCount = (count) => {\n  if (!todayCountElement) return;\n  todayCountElement.textContent = count;\n};\n\n// Add animation to the smoking button when clicked\nexport const animateSmokeButton = () => {\n  if (!smokeButton) return;\n  \n  // Add active class\n  smokeButton.classList.add('active');\n  \n  // Remove active class after animation completes\n  setTimeout(() => {\n    smokeButton.classList.remove('active');\n  }, 200);\n};\n\n// Clear the records list\nexport const clearRecordsList = () => {\n  if (!recordsList) return;\n  recordsList.innerHTML = '';\n};\n\n// Add a record to the UI list\nexport const addRecordToList = (record, index = 0) => {\n  if (!recordsList) return;\n  \n  const li = document.createElement('li');\n  const timeSpan = document.createElement('span');\n  timeSpan.className = 'record-time';\n  timeSpan.textContent = formatTimestamp(record.timestamp);\n  \n  const elapsedSpan = document.createElement('span');\n  elapsedSpan.className = 'record-elapsed';\n  \n  // For first item (most recent), show \"Just now\"\n  if (index === 0) {\n    elapsedSpan.textContent = '(Just now)';\n  } else {\n    const previousRecord = recordsList.children[index-1]?.dataset?.timestamp;\n    if (previousRecord) {\n      const elapsed = parseInt(previousRecord) - record.timestamp;\n      elapsedSpan.textContent = `(${formatElapsedTime(elapsed)} after previous)`;\n    }\n  }\n  \n  // Store timestamp as a data attribute for calculations\n  li.dataset.timestamp = record.timestamp;\n  \n  li.appendChild(timeSpan);\n  li.appendChild(elapsedSpan);\n  \n  // Insert at the beginning of the list\n  if (recordsList.firstChild) {\n    recordsList.insertBefore(li, recordsList.firstChild);\n  } else {\n    recordsList.appendChild(li);\n  }\n};\n\n// Update the records list with all today's records\nexport const updateRecordsList = (records) => {\n  clearRecordsList();\n  \n  // Sort records in reverse chronological order\n  const sortedRecords = [...records].sort((a, b) => b.timestamp - a.timestamp);\n  \n  // Add each record to the list\n  sortedRecords.forEach((record, index) => {\n    addRecordToList(record, index);\n  });\n};\n\n// Show an alert notification\nexport const showNotification = (message, type = 'info') => {\n  const notification = document.createElement('div');\n  notification.className = `notification ${type}`;\n  notification.textContent = message;\n  \n  document.body.appendChild(notification);\n  \n  // Auto-remove after 3 seconds\n  setTimeout(() => {\n    notification.classList.add('fade-out');\n    setTimeout(() => {\n      document.body.removeChild(notification);\n    }, 300);\n  }, 3000);\n};\n\n// Create and handle installation prompt\nexport const setupInstallPrompt = (deferredPrompt) => {\n  const installButton = document.createElement('button');\n  installButton.className = 'install-button';\n  installButton.innerHTML = '📥';\n  installButton.title = 'Install App';\n  \n  installButton.addEventListener('click', async () => {\n    // Hide the button\n    installButton.style.display = 'none';\n    \n    // Show the installation prompt\n    deferredPrompt.prompt();\n    \n    // Wait for the user to respond to the prompt\n    const { outcome } = await deferredPrompt.userChoice;\n    console.log(`Installation outcome: ${outcome}`);\n  });\n  \n  document.body.appendChild(installButton);\n  installButton.style.display = 'flex';\n};","// app.js - Main application module for SmokeStats PWA\nimport * as db from './db.js';\nimport * as ui from './ui.js';\nimport * as timer from './timer.js';\n\n// Global state\nlet deferredPrompt = null;\n\n// Initialize the application\nconst initApp = async () => {\n  console.log('Initializing SmokeStats app');\n  \n  // Initialize the UI\n  if (!ui.initUI()) {\n    console.error('Failed to initialize UI');\n    return;\n  }\n  \n  // Initialize the database\n  try {\n    await db.initDB();\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    ui.showNotification('Failed to initialize the app, please try again.', 'error');\n    return;\n  }\n  \n  // Initialize the timer\n  timer.initTimer('last-smoke-timer');\n  \n  // Load today's records\n  await loadTodayData();\n  \n  // Set up event listeners\n  setupEventListeners();\n  \n  console.log('App initialization complete');\n};\n\n// Load today's data\nconst loadTodayData = async () => {\n  try {\n    // Get today's records\n    const records = await db.getTodayRecords();\n    \n    // Update the counter\n    ui.updateTodayCount(records.length);\n    \n    // Update the records list\n    ui.updateRecordsList(records);\n    \n    // Update the timer if there are records\n    if (records.length > 0) {\n      // Sort records to get the latest one\n      const latestRecord = [...records].sort((a, b) => b.timestamp - a.timestamp)[0];\n      timer.updateTimer(latestRecord.timestamp);\n    }\n  } catch (error) {\n    console.error('Error loading today\\'s data:', error);\n    ui.showNotification('Failed to load today\\'s data.', 'error');\n  }\n};\n\n// Set up event listeners\nconst setupEventListeners = () => {\n  // Smoke button click\n  const smokeButton = document.getElementById('smoke-button');\n  smokeButton.addEventListener('click', async () => {\n    try {\n      // Animate the button\n      ui.animateSmokeButton();\n      \n      // Add a new record\n      const record = await db.addSmokeRecord();\n      \n      // Update the timer\n      timer.updateTimer(record.timestamp);\n      \n      // Update the counter\n      const count = await db.getTodayCount();\n      ui.updateTodayCount(count);\n      \n      // Add the record to the list\n      ui.addRecordToList(record, 0);\n      \n    } catch (error) {\n      console.error('Error recording smoke:', error);\n      ui.showNotification('Failed to record your smoking.', 'error');\n    }\n  });\n  \n  // Listen for beforeinstallprompt event\n  window.addEventListener('beforeinstallprompt', (e) => {\n    // Prevent the default browser install prompt\n    e.preventDefault();\n    \n    // Save the event to trigger it later\n    deferredPrompt = e;\n    \n    // Show the install button\n    ui.setupInstallPrompt(deferredPrompt);\n  });\n};\n\n// Initialize the app when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', initApp);"],"file":"assets/index-109eaf2a.js"}